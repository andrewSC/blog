<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Andrew Scott Crerar]]></title>
  <link href="http://andrewSC.github.com/blog/atom.xml" rel="self"/>
  <link href="http://andrewSC.github.com/blog/"/>
  <updated>2014-03-30T14:04:56-04:00</updated>
  <id>http://andrewSC.github.com/blog/</id>
  <author>
    <name><![CDATA[Andrew Scott Crerar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Euclid]]></title>
    <link href="http://andrewSC.github.com/blog/blog/2013/01/20/archp1/"/>
    <updated>2013-01-20T21:36:00-05:00</updated>
    <id>http://andrewSC.github.com/blog/blog/2013/01/20/archp1</id>
    <content type="html"><![CDATA[<p>SO, this Christmas I was gifted a couple computer parts for a tower refresh and
this weekend I made some time to put everything together and install Arch Linux
on it. Since it’s been quite some time since I had installed Arch a lot has
changed and it took me a while to come around and figure stuff out. Seeing as
I’m doing something a little one-offish I thought it might be nice to share what
I did so people who might be trying to do roughly the same thing can see how I
approached this beast.</p>

<p>The Setup</p>

<ul>
<li>Asus Sabertooth X79</li>
<li>Intel i7 Sandy Bridge 3.6Ghz Quad Core</li>
<li>32GB G. Skill DDR3 ram at 1600Mhz</li>
<li>(2) OCZ Vertex 4 SATA III drives</li>
</ul>


<p>The OS</p>

<ul>
<li>Arch Linux 2013.01.04</li>
<li>GPT</li>
<li>UEFI</li>
<li>efibootmgr</li>
<li>LVM2 (software raid-0 with two drives)</li>
</ul>


<h2>Steps</h2>

<ol>
<li><p>Download the latest Arch Linux iso and dd it to your thumb drive.
Since I run off of an MBA most of the time, OS X commands are a little
different:
<pre>
diskutil unmountDisk /dev/disk1 dd
if=/path/to/archlinuxisoyoudownloaded.iso of=/dev/disk1 bs=8192
diskutil eject /dev/disk1
</pre>
More information can be found at: <a href="https://wiki.archlinux.org/index.php/USB_Installation_Media">Archwiki - USB installation media</a></p></li>
<li><p>Put that bad boy into a usb slot on your machine and boot it.  Once you’re
at the terminal and logged in as root (should automagically happen) go ahead
and pull up gdisk for /dev/sda: <code>gdisk /dev/sda</code> In gdisk you’ll see:</p>

<ul>
<li><code>Command (? for help):</code>

<ul>
<li>Type <code>n</code></li>
<li>Leave Partition number blank</li>
<li>Leave First sector blank</li>
<li>Type <code>+1G</code> for the Last sector field</li>
<li>Type <code>EF00</code> for the Hex code</li>
</ul>
</li>
</ul>


<p>Repeat the steps in 2 again but this time leave the <code>Last sector</code> field blank.
For the Hex code you’ll want to type <code>8E00</code>.
Go ahead and write these changes to disk by typing <code>w</code>.
You can verify everything was done correctly by using</p>

<ul>
<li><code>fdisk -l</code></li>
<li><code>lsblk</code></li>
</ul>


<p>to verify the partitions are there.
More info can be found <a href="http://www.rodsbooks.com/gdisk/walkthrough.html">here</a> and <a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface#Create_an_UEFI_System_Partition_in_Linux">here</a>.</p></li>
<li><p>Next we’re going to setup LVM2.  Go ahead and type:
<pre>
pvcreate —dataalignment 1m /dev/sda2
pvcreate —dataalignment 1m /dev/sdb1
</pre>
You can verify the physical volumes were created by typing <code>pvdisplay</code></p></li>
<li><p>Create the volume group:
<pre>
vgcreate VolGroup00 /dev/sda2
vgextend VolGroup00 /dev/sdb1
</pre>
Again, you can verify everything went a-okay with <code>vgdisplay</code></p></li>
<li><p>Create the logical volume:
<pre>
lvcreate -L 220G VolGroup00 -n lveuclid
</pre>
You can change the size of the volume later if 220 Gigabytes isn’t your thing.
Also, <code>lveuclid</code> is just what I’m naming this volume, you can name yours whatever you like.</p></li>
<li><p>Create the file systems:
<pre>
mkfs.vfat -F32 /dev/sda1
mkfs.ext4 /dev/mapper/VolGroup00-lveuclid
</pre></p></li>
<li><p>Mount!!!!
<pre>
mount /dev/mapper/VolGroup00-lveuclid /mnt
mkdir /mnt/boot/efi
mount /dev/sda1 /mnt/boot/efi
</pre></p></li>
<li><p>Install!!!! Make sure to put a fast server mirror in mirror list. Just add the <code>Server =</code> line
to the top of the file:
<pre>
nano /etc/pacman.d/mirrorlist
Server = http://mirror.rit.edu/archlinux/$repo/os/$arch
pacstrap /mnt base base-devel
</pre>
From here on out I just followed the Beginners guide as it breaks everything down fairly nicely <a href="https://wiki.archlinux.org/index.php/Beginners'_Guide">Arch Linux - Beginners guide</a>
Be sure to add <code>lvm</code> to your hooks array in mkinitcpio.conf and re-generate. Also, for <code>efibootmgr</code> just follow these steps: <a href="https://wiki.archlinux.org/index.php/UEFI_Bootloaders#Using_efibootmgr_entry">Arch Linux - UEFI bootloaders</a></p></li>
</ol>


<p><strong>NOTES</strong></p>

<ul>
<li>If you ever need to go back into the installer env. to do something on the LVM raid you created, to mount the LVM raid:
<pre>
modprobe dm-mod
vgscan
vgchange –ay
mount /dev/mapper/yourlvmvolumenamehere /mnt
</pre></li>
<li>If you are trying to boot the volume be sure to use the UUID of the LVM volume <strong>NOT the partUUID</strong> as the archwiki suggests:
<pre>
root=UUID=yourguidhere
</pre></li>
</ul>


<p>Honestly I’m pretty happy with this setup.
You can see my boot times:</p>

<p><img src="http://i.imgur.com/lYIgI.png">
In terms of raw performance in read/write, I’m still working out the kinks
but I’m getting around 600MB/s read and about ~460MB/s write.
It’s not great but I’m sure there’s something I can tweak to pick these
numbers up around the 900s like many people are reporting in windowsland.</p>

<p>Finally, many many extra credit andy points if you got the <a href="http://en.wikipedia.org/wiki/Pi_%28film%29">euclid</a> reference (yes, it actually is my hostname).  If you have any questions don’t hesitate to contact me (´◔◞౪◟◔)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly Reminder]]></title>
    <link href="http://andrewSC.github.com/blog/blog/2013/01/20/reminder/"/>
    <updated>2013-01-20T21:20:00-05:00</updated>
    <id>http://andrewSC.github.com/blog/blog/2013/01/20/reminder</id>
    <content type="html"><![CDATA[<h5>The single most important reason to create a routine is to reduce a program’s complexity.  Create a routine to hide information so that you won’t need to think about it.  Sure, you’ll need to think about it when you write the routine.  But after it’s written, you should be able to forget the details and use the routine without any knowledge of its internal workings.  Other reasons to create routines—minimizing code size, improving maintainability, and improving correctness—are also good reasons, but without the abstractive power of routines, complex programs would be impossible to manage intellectually.</h5>

<h3>A indication that a routine needs to be broken out of another routine is deep nesting of an inner loop or a conditional.  Reduce the containing routine’s complexity by pulling the nested part out and putting it into its own routine.</h3>

<p>p. 164 <a href="http://en.wikipedia.org/wiki/Code_Complete">Code Complete</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trackpad, you suck]]></title>
    <link href="http://andrewSC.github.com/blog/blog/2013/01/19/trackpad/"/>
    <updated>2013-01-19T18:23:00-05:00</updated>
    <id>http://andrewSC.github.com/blog/blog/2013/01/19/trackpad</id>
    <content type="html"><![CDATA[<p>Hi all,</p>

<p>So over the past month or so I’ve been having some pretty xtreme issues with my 2011 Apple Macbook Air 13” and to put it lightly, they could have been a real deal breaker if I hadn’t backed my data up. Basically it started with my laptop intermittently freezing. Now these freezes weren’t the easiest kind to diagnose because their timings were inconsistent/I couldn’t trigger the lockup through a series of repeatable actions. Basically  the only way out of these things was to do a hard reset (I tried waiting out the pinwheel of death, iLost). Finally, after about three months of inconsistent lockups the SSD progressed to complete NAND/SSD controller failure.</p>

<p>Because I’m the genius that I am, I had everything backed up to a TimeMachine on my RAID 1 NAS so I didn’t lose any data but it did bring my productivity to a grinding halt for the rest of the day. I ended up spending the next six or so hours waiting for TimeMachine to restore the latest backup to the original SSD. Once that was done, I had my wheels back. OR SO I THOUGHT <em>dun dun dun</em></p>

<p>About a week later I started having some very odd trackpad issues (f*** me, right?). The trackpad would emote from time to time and click-n-drag all the things or assume I was dragging my knuckles all over it in an attempt to click the proper tab on my web browser. Well, it got to the point where I had had enough and decided to take destiny by the reins (whoa)</p>

<p>First, I placed an order with <a href="http://bit.ly/Riv5u0">iFixit</a></p>

<p>Second, I printed <a href="http://bit.ly/RiAGRb">this</a> guide.</p>

<p>Third, I disassembled my laptop:</p>

<p><img src="http://i.imgur.com/OYcbC.jpg" width="700" height="700">
<img src="http://i.imgur.com/44Bad.jpg" width="700" height="700">
<img src="http://i.imgur.com/prD02.jpg" width="700" height="700">
<img src="http://i.imgur.com/fQVly.jpg" width="700" height="700">
<img src="http://i.imgur.com/DwMCh.jpg" width="700" height="700">
<img src="http://i.imgur.com/Sxdu4.jpg" width="700" height="700">
<img src="http://i.imgur.com/51xHn.jpg" width="700" height="700">
<img src="http://i.imgur.com/sHlym.jpg" width="700" height="700">
<img src="http://i.imgur.com/nCV7F.jpg" width="700" height="700"><br/>
Voilà! and that completes my trackpad superfuntime.gif replacement experience.  Honestly I was expecting it to be much worse given the recent reviews about how Macbooks are becoming incredibly difficult to repair. However, compared to my Acer Ferrari 4000, this was painless.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hmm, where were we?]]></title>
    <link href="http://andrewSC.github.com/blog/blog/2013/01/19/hmm/"/>
    <updated>2013-01-19T14:23:00-05:00</updated>
    <id>http://andrewSC.github.com/blog/blog/2013/01/19/hmm</id>
    <content type="html"><![CDATA[<p>Hi everyone!</p>

<p>Today is a pretty exciting day because I’m starting my own blog!  Over the past several weeks I’ve had a real hankering to post what I’ve been working on academically as well as my personal Adventure Time adventures with Arch Linux system administration/installing things/computer.  So besides posting all that cool geometric mess I want to work on these things, long termskis:</p>

<p>+Better writing/grammar in short format, for the win.
Provide some way for others to see what I <em>actually</em> do when I’m too busy to brohang.exif
Make notes for my future self so if I durp and have to redo something on an older machine I can be like: “Oh yeah, math that, this is how I did it”.
As I think of more reasons to have a blog I’ll be sure to post them (´◔◞౪◟◔)</p>
]]></content>
  </entry>
  
</feed>
